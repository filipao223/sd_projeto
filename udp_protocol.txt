--> MulticastServer
<-- RMI Server

Exemplo de um datagrama

[ server | 2 ;  feature |  2  ;   username  |  flipao   ;   acao  |  renomear_musica_nr3 ]

/*------Todos --> ------*/
Todos os datagramas em direção ao servidor multicast têm este campo

--> server : string (Depois cast para integer)
    um numero de servidor

/*------Todos------*/
Todos os datagramas têm este campo

--> feature : string  (Depois cast para integer)
    feature:
        login (1) - (feature_LOGIN)
        manage (2) - (feature_MANAGE), ....
        search
        details
        critique
        make_editor
        note_editor
        note_new_edit
        note_deliver
        upload
        share
        download
        callback

(internal) new server

<-- new_server : int  (server number)

/*Para garantir que os pedidos sao sempre processados, a lista com numeros de
 servidor do gerador do numero de
servidor é aumentada dinamicamente assim que novos sao ligados*/

(internal) server down

<-- server_down : int (server number)

/*O oposto de new server, remove da lista o numero recebido */

registo

--> username : string
--> password : string
<-- resposta : callback

login

--> username : string
--> password : string
<-- resposta : callback

logout

--> username : string
<-- resposta : callback

gerir-add

--> username : string
--> action : string
/*---Formato acao*/
Usar valores em request (Request.ADD_ALBUM, Request.ADD_ARTIST)
Cada valor separado por "_"
1.album, artist
2. Valores sao obrigatorios para a criaçao na base de dados
-album: name
-artist: name
Exemplo:
album_"nome do album"
(usando os valores de Request em vez de strings:
 33_"nome do album")

gerir-remove

--> username : string
--> action : string
/*---Formato acao*/
Usar valores em request (Request.REMOVE_ALBUM, Request.REMOVE_ARTIST)
Cada valor separado por "_"
1.album, artist
2. Valores sao obrigatorios para a remoçao da base de dados
-album: name
-artist: name
Exemplo:
album_"nome do album"
(usando os valores de Request em vez de strings:
 33_"nome do album")

gerir-edit

--> username : string
--> action : string
/*---Formato acao*/
Usar valores em Request (Request.EDIT_NAME, Request.EDIT_MUSIC, ...)
Cada valor separada por "_"
1. album, music, artist
2.

-album: name, year, artist, description, genre
-music: name, album, artist, lyrics, year
-artist: name, birth, description
3. name of artist/album/music
4. new value (string)
Exemplo:
music_name_"music1"_"nome de musica novo"
(usando os valores de Request em vez de strings:
 16_18_"music1"_"nome de musica novo")
/*---------------*/
<-- resposta : callback

pesquisa 

--> user : string
--> action : string
/*---Formato acao*/
1.Tipo de pesquisa - album, artist, music
2.Parametros pesquisa:
-album: name, artist, genre (pelo menos 1 destes)
-music: name, artist, album (pelo menos 1)
-artist: name
<-- resposta : callback

consulta album

--> username : string
--> album : string
<-- resposta : callback

consulta artista 

--> username : string
--> artist : string
<-- resposta : callback

critica

--> user : string
--> album : string
--> critique : string
<-- resposta : callback

make editor

--> editor : string  (editor que tornou)
--> user : string    (user que se tornou)
<-- resposta : callback

notificacao editor

<-- new_editor : string  (novo do novo editor)

notificao alteracao album

<-- editor : string (nome do editor)
<-- album : string (nome do album)

notificao alteracao artista

<-- editor : string  (nome do editor)
<-- old : string     (antigo nome do artista)
<-- new  : string    (novo nome do artista)


entrega notificacoes 

<-- username : string
<-- notes : Array de string

transferencia de musicas para o server

--> user : string   (user que pretende a musica)
--> music : string  (nome da musica)
<-- resposta : callback (contem endereço do servidor)

partilha 

--> username : string
--> targetUser : string
<-- resposta : callback

transferencia de musica para utilizador

--> user : string
--> music : string
<-- resposta : callback

callback

<-- feature : string   (feature pedida ao servidor, o pacote contem na mesma o feature no inicio [Callback])
<-- username : string  (user que pediu)
<-- answer : string
<-- optional : object   (Em algumas features, como o login, será null, noutras terá alguma coisa, como uma musica p.ex)

open tcp connection (returns address of server to upload music)

<-- address : string